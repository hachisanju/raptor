#!/usr/bin/python

#:'#######:::'######::'##::::'##:::'#####:::
#'##.... ##:'##... ##: ##:::: ##::'##.. ##::
#..::::: ##: ##:::..:: ##:::: ##:'## #:: ##:
#:'#######:: ##::::::: #########: ##: #: ##:
#:...... ##: ##::::::: ##.... ##: ##:: # ##:
#'##:::: ##: ##::: ##: ##:::: ##:. ##:: ##::
#. #######::. ######:: ##:::: ##::. #####:::
#:.......::::......:::..:::::..::::.....::::
#:'#######:::::'###:::::'######::'########::
#'##.... ##:::'## ##:::'##... ##: ##.....:::
# ##:::: ##::'##:. ##:: ##:::..:: ##::::::::
#: #######::'##:::. ##:. ######:: ######::::
#'##.... ##: #########::..... ##: ##...:::::
# ##:::: ##: ##.... ##:'##::: ##: ##::::::::
#. #######:: ##:::: ##:. ######:: ########::
#:.......:::..:::::..:::......:::........:::


import sys
import getopt
import subprocess
import fs_tests
import report

#List of tests to perform. These are defined by the CIS hardening guidelines for CentOS Linux 07
FILESYSTEMS = True


def main():                     #Arguments for main set the tests which are to be disbaled
	global FILESYSTEMS

	if len(sys.argv) == 1:
		print("Please enter a command. For a list of available commands and flags, add -help")

	if "-help" in str(sys.argv):
		print("       runtest       initiate a test for the system")
		print("       -dfs          disable filesystem tests")
		print("       -ignm         ignore mitigation advisories")

	if "-dfs" in str(sys.argv):
		FILESYSTEMS = False

	if "-ignm" in str(sys.argv):
		report.set_mitigation(False)

	if "-igne" in str(sys.argv):
		report.set_error(False)

	if "runtest" in str(sys.argv):
		init_test()


def init_test():                 #The main testing phase
	
	global FILESYSTEMS           #Relocalization of Global Variables

	FSTESTS = 0.0                #Total number of filesystem tests
	FSPASS = 0.0                 #Total number of tests passed
	

	if FILESYSTEMS == True:

		#Tests for mountable filesystems
		#-------------------------------

		cramfsResult = fs_tests.mounting("cramfs")
		if (cramfsResult.error == None):
			FSTESTS += cramfsResult.totalpoints
			FSPASS += cramfsResult.points
		else:
			report.error(cramfsResult.errorstatus)
		report.report ("\n")

		freevxfsResult = fs_tests.mounting("freevxfs")
		if (freevxfsResult.error == None):
			FSTESTS += freevxfsResult.totalpoints
			FSPASS += freevxfsResult.points
		else:
			report.error(freevxfsResult.errorstatus)
		report.report ("\n")
		
		hfsResult = fs_tests.mounting("hfs")
		if (hfsResult.error == None):
			FSTESTS += hfsResult.totalpoints
			FSPASS += hfsResult.points
		else:
			report.error(hfsResult.errorstatus)
		report.report ("\n")

		hfsplusResult = fs_tests.mounting("hfsplus")
		if (hfsplusResult.error == None):
			FSTESTS += hfsplusResult.totalpoints
			FSPASS += hfsplusResult.points
		else:
			report.error(hfsplusResult.errorstatus)
		report.report ("\n")

		squashfsResult = fs_tests.mounting("squashfs")
		if (squashfsResult.error == None):
			FSTESTS += squashfsResult.totalpoints
			FSPASS += squashfsResult.points
		else:
			report.error(squashfsResult.errorstatus)
		report.report ("\n")

		udfResult = fs_tests.mounting("udf")
		if (udfResult.error == None):
			FSTESTS += udfResult.totalpoints
			FSPASS += udfResult.points
		else:
			report.error(udfResult.errorstatus)
		report.report ("\n")
			
		vfatResult = fs_tests.mounting("vfat")
		if (vfatResult.error == None):
			FSTESTS += vfatResult.totalpoints
			FSPASS += vfatResult.points
		else:
			report.error(vfatResult.errorstatus)
		report.report ("\n")
		
		
		#Tests for world-writable directories
		#------------------------------------
		tmpResults = fs_tests.partition("/tmp", "tmp")
		if (tmpResults.error == None):
			FSTESTS += tmpResults.totalpoints
			FSPASS += tmpResults.points
		else:
			report.error(tmpResults.errorstatus)
		report.report ("\n")

	if FSTESTS != 0:
		FSGRADE = FSPASS/FSTESTS * 100
		print ("Filesystem overall score = {}".format(FSGRADE))
	else:
		report.report("No tests were run successfully. Are you running on the correct operating system?")
	





if __name__ == "__main__":
	main()
